const board = document.getElementById('board');
const status = document.getElementById('status');
const resetBtn = document.getElementById('reset-btn');
const difficultySelector = document.getElementById('difficulty');
const loadingScreen = document.getElementById('loading-screen');
const gameContainer = document.getElementById('game-container');
const backgroundMusic = document.getElementById('background-music');

let currentPlayer = 'X';
let gameBoard = ['', '', '', '', '', '', '', '', ''];
let isGameOver = false;
let difficultyLevel = 'easy';

// Initialize the board with clickable cells
function initializeBoard() {
    board.innerHTML = ''; // Clear previous board
    gameBoard = ['', '', '', '', '', '', '', '', ''];
    isGameOver = false;
    status.textContent = "Player X's turn";

    for (let i = 0; i < 9; i++) {
        const cell = document.createElement('div');
        cell.addEventListener('click', () => handleCellClick(i), { once: true });
        board.appendChild(cell);
    }
}

// Handle cell clicks
function handleCellClick(index) {
    if (gameBoard[index] === '' && !isGameOver) {
        gameBoard[index] = currentPlayer;
        updateBoard();
        checkWinner();
        switchPlayer();
    }
}

// Update the board after each move
function updateBoard() {
    const cells = document.querySelectorAll('.board div');
    gameBoard.forEach((mark, index) => {
        cells[index].textContent = mark;
        if (mark !== '') cells[index].classList.add('taken');
    });
}

// Switch player after each turn
function switchPlayer() {
    currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
    status.textContent = `Player ${currentPlayer}'s turn`;
}

// Check if the game has a winner or is a draw
function checkWinner() {
    const winPatterns = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns
        [0, 4, 8], [2, 4, 6],            // Diagonals
    ];

    for (let pattern of winPatterns) {
        const [a, b, c] = pattern;
        if (gameBoard[a] && gameBoard[a] === gameBoard[b] && gameBoard[a] === gameBoard[c]) {
            isGameOver = true;
            status.textContent = `Player ${gameBoard[a]} wins!`;
            return;
        }
    }

    if (!gameBoard.includes('')) {
        isGameOver = true;
        status.textContent = "It's a draw!";
    }
}

// Reset the game
resetBtn.addEventListener('click', initializeBoard);

// Difficulty level logic (simplified for now)
difficultySelector.addEventListener('change', (e) => {
    difficultyLevel = e.target.value;
});

// Hide the loading screen after the page is fully loaded
window.onload = () => {
    setTimeout(() => {
        loadingScreen.style.display = 'none'; // Hide loading screen
        gameContainer.style.display = 'block'; // Show game container
        initializeBoard(); // Initialize the game board
    }, 1000); // Simulate loading time of 1 second
};
